{"version":3,"sources":["ClientOauthInfo.js","App.js","reportWebVitals.js","index.js"],"names":["ClientOauthInfo","clientID","mbClient","MoneyButtonClient","useState","name","setName","balanace","setBalanace","bio","setBio","avatarUrl","setAvatarUrl","useEffect","a","getIdentity","userId","id","getBalance","amount","currency","satoshis","getUserProfile","afterRender","onClick","requestAuthorization","logOut","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gQA0DeA,EAvDS,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnBC,EAAW,IAAIC,IAAkBF,EAAU,KAAM,0BADf,EAEhBG,mBAAS,IAFO,mBAEjCC,EAFiC,KAE3BC,EAF2B,OAGRF,mBAAS,sBAHD,mBAGjCG,EAHiC,KAGvBC,EAHuB,OAIlBJ,mBAAS,sBAJS,mBAIjCK,EAJiC,KAI5BC,EAJ4B,OAKNN,mBAAS,wBALH,mBAKjCO,EALiC,KAKtBC,EALsB,KAqBxC,OAdAC,qBAAU,WAAM,4CACd,8CAAAC,EAAA,sEACqCZ,EAASa,cAD9C,uBACUV,EADV,EACUA,KAAUW,EADpB,EACgBC,GADhB,SAE+Cf,EAASgB,WAAWF,GAFnE,uBAEUG,EAFV,EAEUA,OAAQC,EAFlB,EAEkBA,SAAUC,EAF5B,EAE4BA,SAF5B,UAGmCnB,EAASoB,eAAeN,GAH3D,iBAGUP,EAHV,EAGUA,IAAKE,EAHf,EAGeA,UACbL,EAAQD,GACRG,EAAY,GAAD,OAAIW,EAAJ,YAAcC,EAAd,aAA2BC,EAA3B,MACXX,EAAOD,GACPG,EAAaD,GAPf,6CADc,uBAAC,WAAD,wBAUdY,KACC,IAID,gCACE,sDACA,mDAEE,wBAAQC,QAAS,kBACftB,EAASuB,qBACP,2FACA,8CAHJ,0BAQF,iDACiBpB,KAEjB,oDACoBE,KAEpB,gDACgBE,KAEhB,sDACsBE,KAEtB,8BACE,wBAAQa,QAAS,kBAAMtB,EAASwB,UAAhC,2BCrCOC,MAVf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCKOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5222be8c.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { MoneyButtonClient } from '@moneybutton/api-client'\n\nconst ClientOauthInfo = ({ clientID }) => {\n  const mbClient = new MoneyButtonClient(clientID, null, 'http://moneybutton.com')\n  const [name, setName] = useState('')\n  const [balanace, setBalanace] = useState('waiting balance...')\n  const [bio, setBio] = useState('waiting profile...')\n  const [avatarUrl, setAvatarUrl] = useState('waiting avatarUrl...')\n\n  useEffect(() => {\n    async function afterRender() {\n      const { name, id: userId } = await mbClient.getIdentity()\n      const { amount, currency, satoshis } = await mbClient.getBalance(userId)\n      const { bio, avatarUrl } = await mbClient.getUserProfile(userId)\n      setName(name)\n      setBalanace(`${amount} ${currency} (${satoshis})`)\n      setBio(bio)\n      setAvatarUrl(avatarUrl)\n    }\n    afterRender()\n  }, [])\n\n\n  return (\n    <div>\n      <h2>Web side client flow</h2>\n      <div>\n        Start Oauth flow\n        <button onClick={() =>\n          mbClient.requestAuthorization(\n            'auth.user_identity:read users.profiles:read users.profiles.email:read users.balance:read',\n            'http://moneybutton.com/oauth-redirect-web')\n        }>\n          Click me!\n        </button>\n      </div>\n      <div>\n        Your name is: {name}\n      </div>\n      <div>\n        Your balance is: {balanace}\n      </div>\n      <div>\n        Your bio is: {bio}\n      </div>\n      <div>\n        Your avatarUrl is: {avatarUrl}\n      </div>\n      <div>\n        <button onClick={() => mbClient.logOut()}>\n          Log out\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default ClientOauthInfo\n","import './App.css';\nimport ClientOauthInfo from './ClientOauthInfo';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ClientOauthInfo />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}